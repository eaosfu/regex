STATUS LEGEND:
(I): INCOMPLETE/NOT STARTED
(P): IN PROGRESS
(D): DONE
(H): ON HOLD

FORMAT:
<STATUS> <ACTION> <DESCRIPTION>

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
Notes:
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
- POSIX: REGEX GENERAL REQUIREMENTS
  SOURCE: http://pubs.opengroup.org/onlinepubs/009696899/basedefs/xbd_chap09.html#tag_09_03_05

  "The implementation shall support any regular expression that does not exceed 256 bytes in length."

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
TODO ITEMS LISTED IN ORDER:
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
(D) - UPDATE typedef NFA with flags indicating the type of NFA node we're dealing with:
             The flags should be as follows:
               - is_literal    --- indicates matches a specific literal
               - is_dot        --- indicates matches any literal
               - is_accepting  --- indicates node is an accepting state
               - is_split      --- indicates node has more than one transition out of it
               - is_epsilon    --- indicates node is an epsilon transition
               - is_range      --- indicates node is a bitstring where each bit represents one literal
                                   if the bit is set, the literal is matched otherwise the literal should
                                   not be matched
             The flags can be represented by an unsigned char (8 bits) and bit masks used to check whether
             the flag is set.

(D) - UPDATE scanner so there's a way to control whether escape sequences are treated as a single character
             E.x. Decide whether to treat \( as two characters or a single 'special' character
             This is usefule when parsing bracket expression where \( should be treated as two separate
             characters but as a single 'special' character when NOT in a bracket expression

(D) - FIX    parse_match_list_expression():regex_parser.c the expression '[.].]' is not treated as an error

(D) - UPDATE how we feed characters to the nfa simulation. In particular, setting flags so we can tell whether
             we're at the beginning of a string (i.e. where a '^' would match) or at the end (i.e. where '$'
             would match).

(D) - CREATE new_range_alternation_nfa():nfa.c

(D) - UPDATE match():regex_parser.c so that it can compare against bitstrings representing a range

(D) - UPDATE scanner so it recognizes digits 0-9

(D) - UPDATE parser to handle interval expressions (i.e. <expression>{<RE_DUP_MIN>, <RE_DUP_MAX>}

(D) - CREATE an Array to keep track of values seen during bracket expression construction
             E.x [aaa] should only create one node of the token-value 'a'
             -- I think an array should be fine since we're not dealing with a very large set
                of characters

(D) - FIX    nfa.c and parser/simulator to make sure we aren't leaking memory. Even though I'm planning 
             on updating how memory is being managed we still should be careful with this.

(H) - UPDATE parse_matching_list():regex_parser.c so that we only update the range nfa passed in by the
             caller (i.e. parse_bracket_expression).

       (D) - implement range expressions (i.e. '[lowbound-highbound]')
       (I) - Research and implement collation expressions (i.e. '[[.<collation_expression>.]]')
       (I) - Research and implement character equivalence expressions (i.e. '[[=<char_equiv_expression>=]]')

(D) - UPDATE scanner.c so that if first reads in the entire regex string and check for the following cases
             performs the prescribed actions based on the presence of the '^' and '$' characters:

             - <regex> 
                 -- No action required
             - '^'<regex>'$'
                 -- No action required
             - <regex>'$':    
                 -- Reverse the regex (i.e. if regex = 'ab$' store it as '$ba' before the parser builds 
                    the nfa). Simply reversing the string wont work we need to concatenate the nfa nodes
                    in reverse order and then read the target input line from end to start.

      NOTE:  I decied the change how this is handled. Instead of prereading the regex string this is now
             handled entirely by coordinating the scanner and nfa_sim. The scanner will add an extra
             'special' value at the end of the target string which is interpreted as an EOL symbol.
             Similarly, when the scanner is reading from the start of a string it sets a BOL flag which
             the nfa_sim checks for when it encounters a NFA node marked BOL.

(I) - UPDATE scanner so we can maintain different states

      NOTE: One of the changes we need is to allocate our own buffers internally... this way the
            caller only needs to provide us with the input. For example the caller should be able
            to simply specify the File that needs to be scanned and all state associated with 
            scanning that files is internal to the scanner.

            We can then maintain a stack of states that allow the user to move around the file
            do some scanning and then revert to a previous scan state after they're done.

(I) - CREATE a global memory management system so we can allocate from a memory pool instead of
             always having to call malloc()

(D) - UPDATE parser/simulator to handle backreferences

(I) - UPDATE simulartor to handle interval expressions (i.e. <expression>{<RE_DUP_MIN>, <RE_DUP_MAX>}
             Actually I think redesigning the simulator would clean things up quite a bit.
             One thing that might help is having a stack for nodes interval expression nodes.
             If the simulator detects that we have transition to such a node then we reset back to
             that nodes parent as many times as need to be counted before declaring a match.

       (D) - UPDATE source and headesr so we can separate nfa_sim from regex_parser

       (I) - UPDATE nfa.c so that individual 'interval expression' nodes have a sequentially assinged
                    ID and a pointer back to the beginning of the expression they affect. Since the ID is
                    sequentially assigned we can then store the 'reach count' in an array within the nfa_sim.
                    The count can then be accessed by using the 'interval node''s ID as an index.
                    When the simulator encounters one of these 'interval nodes' it automatically checks the
                    'reach count' (rc) and decrements it if rc > 0. Otherwise the nfa_sim follows the 'out2'*
                    pointer.

                    * NOTE: 'out1' pointers for nfas that loop always point back to the affected expression's 
                            start state

       (I) - UPDATE match():nfa_sim.c so that it detects interval node and performs the behaviour described
                    in the bullet point above

       (I) - UPDATE simulator to adapt its behaviour based on flags. currently it matches globally (i.e.
                    tries to match everywhere in the target string rather than stopping on first match).
                    Behaviour like this needs to be controlled by flags:

                    -g: Match globally in the string (i.e. make current behaviour stop as soon as fisrt
                        match is found)

                    -i: case insensitive match

                    -s: Treat the string as single line. That is, change "." to match any character 
                        whatsoever, even a newline, which normally it would not match. 
                        -- Taken from (http://perldoc.perl.org/perlre.html)

                    To achieve thise we will probably have to add a 'global configuraiton' item accessible to
                    all components in the regex engine 

(D) - UPDATE nfa_sim.c so that it reads its input from a file rather than stdin.

(P) - CREATE test cases for regex engine, implement test cases

(I) - CREATE test cases for library code, implement test cases

(I) - CREATE test suite that integrates test cases for the different components

(I) - UPDATE list.c and nfa.c to use the new memory management system

(I) - UPDATE create a wrapper for fatal():misc.c in regex_parser.c that takes in a pointer to
             the parser object and frees memory used before calling the real fatal():misc.c

(I) - UPDATE parser so all calls to fatal():misc.c are changed to parser_fatal():regex_parser.c and
             pass a pointer to the parser object

(I) - UPDATE fatal():misc.c and warn():misc.c so they can take printf style argument list

(I) - UPDATE -- find a way to pack the final nfa into an array rather than following pointers

(I) - UDPATE uses of 'symbol_type' to 'token_type'

